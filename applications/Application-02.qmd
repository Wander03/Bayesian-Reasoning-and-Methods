---
title: "STAT 415 Application 2"
author: "Andrew Kerr"
date: ''
format:
  html:
    number_sections: yes
    code-fold: true
    toc: true
    toc-title: "Outline"
    toc-depth: 3
embed-resources: true
---

# Instructions

This RMarkdown file provides a template for you to fill in.
Read the file from start to finish, completing the parts as indicated.
Some code is provided for you.
Be sure to run this code, and make sure you understand what it's doing.
Some blank "code chunks" are provided; you are welcome to add more (Code > Insert chunk or CTRL-ALT-I) as needed.
There are also a few places where you should type text responses.
Feel free to add additional text responses as necessary.

You can run individual code chunks using the play button.
You can use objects defined in one chunk in others.
Just keep in mind that chunks are evaluated in order.
So if you call something `x` in one chunk, but redefine `x` as something else in another chunk, it's essential that you evaluate the chunks in the proper order.

# Submission instructions

When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document.
When you are finished

- click **Knit** and check to make sure that you have no errors and everything runs properly.
(Fix any problems and redo this step until it works.)
- Make sure your type your name(s) at the top of the notebook where it says "Type your name(s) here".
If you worked in a team, you will submit a single notebook with both names; make sure all names are included.
- Submit your completed files in Canvas.

# Set up

You'll need a few R packages, which you can install using `install.packages`, e.g., `install.packages("janitor")`.



```{r}
library(knitr)

knitr::opts_chunk$set(
  echo = TRUE,
  warning = FALSE,
  message = FALSE
)
```


```{r}
library(tidyverse)
library(viridis)
library(kableExtra)
library(janitor)

```


# Introduction

Bayes rule is often used in search and rescue operations.
This problem will give a very simplified version of the ideas.
Some R code is provided below, but you're welcome to use other software, including a spreadsheet like Excel (just make sure you copy the prior below properly).


Suppose a plane has crashed somewhere in the Pacific Ocean.
A search and rescue operation has identified a large square area of where the plane might be located.
(We'll assume the plane stays fixed in the place it crashed, but it reality the ocean would move it around.)
The area is divided up into a 10x10 grid consisting of smaller squares; the squares are labeled as $(x, y)$ coordinates with $x = 1, \ldots, 10$, $y=1, \ldots, 10$.
Let $\theta$ be the true location of the plane, represented by the $(x, y)$ coordinates of the square the plane is in.

Each day the search operation can search a single square in the grid.

- If the plane is in the square being searched, then the probability that the search actually finds the plane is $p=0.1$.
(Finding things in the big dark ocean is hard.)
- If the plane is not actually in the square being searched then the search wonâ€™t find it.

Before starting the search, the operation has identified a prior probability that the plane is in each of the squares in the grid.
The prior might be based on things like last contact with the plane, weather, ocean currents, ocean topography, etc.


Note: Don't worry about the code that defines the prior below.
Just take the prior as given; the plot below gives a better picture.


```{r}

N = 10

# Define the 10x10 grid
theta = expand_grid(x = 1:N, y = 1:N)

# Define the prior
prior = exp(-0.3 * (theta$x - 3) ^ 2 + -0.5 * (theta$y - 3) ^ 2) + exp(-0.4 * (theta$x - 7) ^ 2 - 0.2 * (theta$y - 7) ^ 2)
prior = prior / sum(prior)


bayes_table = data.frame(theta,
                         prior)

# Display a few rows of the bayes table

bayes_table |>
  head() |>
  kbl(digits = 5) |>
  kable_styling()

```

The plot below visualizes the prior distribution over the grid.
The color scale ("fill") represents the prior probability, with yellow corresponding to the highest probability, and darker colors corresponding to lower probabilities.

```{r}
ggplot(bayes_table |>
         mutate(
           # changing to factor just aligns the axes better in the plot
           x = factor(x), y = factor(y),
           # display probability as percent
           prior = round(100 * prior, 1)),
       aes(x, y,
           fill = prior,
           label = prior)) +
  # add the colored squares
  geom_tile() +
  # limits fixes the color limits to compare across plots
  scale_fill_viridis_c(limits = c(0, 6)) +
  # the rest just displays the probabilities in the squares
  # black/white text depending on square color
  geom_text(aes(color = prior > 3)) +
  scale_color_manual(guide = "none", values = c("white", "black")) +
  labs(title = "Probability (%) that plane is in square")

```

The operation starts the search in the square with the highest prior probability.
If the search finds the plane, hooray!
If not, **the posterior is computed after *not* finding the plane in the square that was searched that day.**
The next day, the rescue begins in the square with the highest posterior probability after the first day.
The rescue then continues this way day-by-day.
Note: it's possible that a square will be searched on multiple days.

You will use Bayes rule to update the probabilities of the true location of the plane after each day of unsuccessful searching. **Hint: the key is to properly define the *likelihood* column each day.**

The search begins in the square with coordinate (3, 3), the square with the highest prior probability, as identified by the code below.

```{r}

bayes_table |>
  filter(prior == max(prior))

```

# Functions

```{r}
tile <- function(bayes_table, col) {
  ggplot(bayes_table |>
         mutate(
           # changing to factor just aligns the axes better in the plot
           x = factor(x), y = factor(y),
           # display probability as percent
           col = round(100 * {{col}}, 1)),
       aes(x, y,
           fill = col,
           label = col)) +
  # add the colored squares
  geom_tile() +
  # limits fixes the color limits to compare across plots
  scale_fill_viridis_c(limits = c(0, 6)) +
  # the rest just displays the probabilities in the squares
  # black/white text depending on square color
  geom_text(aes(color = col > 3)) +
  scale_color_manual(guide = "none", values = c("white", "black")) +
  labs(title = "Probability (%) that plane is in square")
}
```

# Day 1

Square (3, 3) is searched on day 1.
Suppose *the plane is not found in square (3, 3) on day 1*.
(Hint: this is the evidence.
The key is to properly define the likelihood column.)

1. Construct a Bayes table to compute the posterior distribution after day 1.
(You can display a few rows if you want, but don't print the whole Bayes table.)

```{r}
d1 <- bayes_table %>%
  mutate(
    likelihood = case_when(
      x == 3 & y == 3 ~ .9,
      TRUE ~ 1
    ),
    product = prior * likelihood,
    posterior = product / sum(product)
  )

d1 %>%
  head(10) %>%
  kable()
```

2. Plot the posterior distribution after day 1 in a tile plot like the one for the prior.

```{r}
tile(d1, posterior)
```

3. Compare the posterior distribution to the prior; how has it changed?

The posterior probability for all tiles very slightly increased (by less than .1), expect for tile (3, 3) which decreased since the plane was not found within it.

4. Which location will you search on day 2?

```{r}
d1 %>% slice_max(posterior) %>% select(x, y)
```

I will search the next highest, (7, 7).

# Day 2

Use the posterior after day 1 as the prior for day 2.
The square that you identified in the previous part is searched on day 2.
Suppose *the plane is not found in the square*.

1. Construct a Bayes table to compute the posterior distribution after day 2.
(You can display a few rows if you want, but don't print the whole Bayes table.)

```{r}
d2 <- d1 %>%
  mutate(
    prior = posterior,
    likelihood = case_when(
      x == 7 & y == 7 ~ .9,
      TRUE ~ 1
    ),
    product = prior * likelihood,
    posterior = product / sum(product)
  )

d2 %>%
  head(10) %>%
  kable()
```

2. Plot the posterior distribution after day 2 in a tile plot like the one for the prior.

```{r}
tile(d2, posterior)
```

3. Compare the posterior distribution after day 2 to the posterior distribution after day 1; how has it changed?

Once again the posterior prbabilities slightly increased for all tiles except (7, 7), where it decreased. 

4. Which location will you search on day 3?

```{r}
d2 %>% slice_max(posterior) %>% select(x, y)
```

I will search (3, 3).

**TYPE YOUR RESPONSES HERE.**

# Day 3-10

Continue in this manner for 10 days of unsuccessful searches; you don't find the plane in the first 10 days.
At the end of each day report the square that has the highest posterior probability, and what the probability is.
Also provide a plot of the posterior distribution after the 10 days; how does it compare to the prior?

```{r}
sim_day <- function(bayes_table, best_tile) {
  
  bayes_table <- bayes_table %>%
    mutate(
    prior = posterior,
    likelihood = case_when(
      x == best_tile$x & y == best_tile$y ~ .9,
      TRUE ~ 1
    ),
    product = prior * likelihood,
    posterior = product / sum(product)
  )
  
}

bt <- d2
tile_lst <- data.frame()

for(i in 3:10) {
  best_tile <- bt %>% 
    slice_max(posterior) %>% 
    mutate(day = i) %>%
    select(day, x, y, posterior) 
  tile_lst <- rbind(tile_lst, best_tile)
  bt <- sim_day(bt, best_tile)
}

tile_lst %>% kable()
tile(bt, posterior)
```

Compared to the prior, most of the posterior probabilities have decreased. Additionally, the ratio between the higher and middle probabilities is smaller (they are closer together), however the same shape of which tiles have higher probabilities and which have lower is the same (two circles centered on (3, 3) and (7, 7)).

# Searching the first square on multiple days

Moving the search operation around the ocean is costly.
Starting from the original prior, suppose that you decide to spend the first 4 days searching square (3, 3).
If you don't find the plane after 4 days of searching square (3, 3) what is the posterior distribution?
Note: you should do this in a single Bayes table, with the appropriate likelihood.
(Yes, you could do it sequentially like in the previous parts, but I want you to do it in a single table.)
(Also, yes, we could just adjust $p$ properly to translate from 1-day searches to 4-day searches, but just take the set up as is.)

```{r}
d1_rep <- bayes_table %>%
  mutate(
    likelihood = case_when(
      x == 3 & y == 3 ~ .9 ** 4,
      TRUE ~ 1
    ),
    product = prior * likelihood,
    posterior = product / sum(product)
  )

tile(d1_rep, posterior)
```

Most other tiles have increased by around 0.1, while tile (3, 3) has greatly decreased.

# Searching every square once

1. Starting from the original prior, suppose instead of searching based on highest probability, we just search the squares in order of location: (1, 1) then (1, 2) then (1, 3) etc.
Suppose that *we search every square exactly once and we never find the plane*.
What will the posterior distribution be after the results of these 100 unsuccessful searches?
Explain without doing any calculations.

The posterior distribution should be the exact same as the prior since the same result occured on every tile, which gives us the same amount of information as not searching any tile (that being none!).

# Your choice!

Take the above set up and investigate a question or feature of interest to you.
There is lots you can do; I'll leave it to your creativity!

Since it takes time and money to move around the ocean (and the captain is a bit lazy), I will search the highest probability of the tile and its surrounding tiles. If two tiles have the same probability, then we will select the one of the tied tiles at random.

```{r}
sim_day_adv <- function(bayes_table, best_tile, i) {
  
  bayes_table <- bayes_table %>%
    mutate(
      prior = posterior,
      likelihood = case_when(
        x == best_tile$x & y == best_tile$y ~ .9,
        TRUE ~ 1
      ),
      product = prior * likelihood,
      posterior = product / sum(product)
    )
  
}

bt <- bayes_table %>%
  mutate(posterior = prior)
tile_lst <- data.frame()

best_tile <- bt %>% 
    slice_max(prior, with_ties = F) %>% 
    mutate(
      day = 1,
      probability = prior) %>%
    select(day, x, y, probability)

for(i in 1:50) {
  if(i != 1) {
    last_x_y <- best_tile %>% tail(1) %>% select(x, y)
    best_tile <- bt %>% 
      filter(
        x >= last_x_y$x - 1 & 
          x <= last_x_y$x + 1 & 
          y >= last_x_y$y - 1 & 
          y <= last_x_y$y + 1
        ) %>%
      slice_max(posterior, with_ties = F) %>% 
      mutate(
        day = i,
        probability = posterior
        ) %>%
      select(day, x, y, probability) 
  }
  tile_lst <- rbind(tile_lst, best_tile)
  bt <- sim_day_adv(bt, best_tile, i)
}

tile_lst %>% kable()
tile(bt, posterior)
```

Compared to the prior, the tiles around the starting position of (3, 3) have all greatly decreased, while the other non-zero tiles have increased. This happens even after 50 days of searching since the tiles leading to the other "hotspot" at (7, 7) started out so low.
